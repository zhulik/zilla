# frozen_string_literal: true

# #Kubernetes
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: unversioned
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0-SNAPSHOT
#

require 'cgi'

module Zilla
  class LogsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # @param logpath [String] path to the log
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def log_file_handler(logpath, opts = {})
      log_file_handler_with_http_info(logpath, opts)
      nil
    end

    # @param logpath [String] path to the log
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def log_file_handler_with_http_info(logpath, opts = {})
      @api_client.config.logger.debug 'Calling API: LogsApi.log_file_handler ...' if @api_client.config.debugging
      # verify the required parameter 'logpath' is set
      if @api_client.config.client_side_validation && logpath.nil?
        raise ArgumentError,
              "Missing the required parameter 'logpath' when calling LogsApi.log_file_handler"
      end

      # resource path
      local_var_path = '/logs/{logpath}'.sub('{logpath}', CGI.escape(logpath.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerToken']

      new_options = opts.merge(
        operation: :'LogsApi.log_file_handler',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsApi#log_file_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end

    # @param [Hash] opts the optional parameters
    # @return [nil]
    def log_file_list_handler(opts = {})
      log_file_list_handler_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def log_file_list_handler_with_http_info(opts = {})
      @api_client.config.logger.debug 'Calling API: LogsApi.log_file_list_handler ...' if @api_client.config.debugging
      # resource path
      local_var_path = '/logs/'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['BearerToken']

      new_options = opts.merge(
        operation: :'LogsApi.log_file_list_handler',
        header_params:,
        query_params:,
        form_params:,
        body: post_body,
        auth_names:,
        return_type:
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsApi#log_file_list_handler\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      [data, status_code, headers]
    end
  end
end
