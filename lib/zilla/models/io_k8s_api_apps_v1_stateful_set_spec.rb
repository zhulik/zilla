# frozen_string_literal: true

# #Kubernetes
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: unversioned
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0-SNAPSHOT
#

require 'date'
require 'time'

module Zilla
  # A StatefulSetSpec is the specification of a StatefulSet.
  class IoK8sApiAppsV1StatefulSetSpec
    # Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
    attr_accessor :min_ready_seconds

    attr_accessor :persistent_volume_claim_retention_policy, :selector, :template, :update_strategy

    # podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.
    attr_accessor :pod_management_policy

    # replicas is the desired number of replicas of the given Template. These are replicas in the sense that they are instantiations of the same Template, but individual replicas also have a consistent identity. If unspecified, defaults to 1.
    attr_accessor :replicas

    # revisionHistoryLimit is the maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied StatefulSetSpec version. The default value is 10.
    attr_accessor :revision_history_limit

    # serviceName is the name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: pod-specific-string.serviceName.default.svc.cluster.local where \"pod-specific-string\" is managed by the StatefulSet controller.
    attr_accessor :service_name

    # volumeClaimTemplates is a list of claims that pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name.
    attr_accessor :volume_claim_templates

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        min_ready_seconds: :minReadySeconds,
        persistent_volume_claim_retention_policy: :persistentVolumeClaimRetentionPolicy,
        pod_management_policy: :podManagementPolicy,
        replicas: :replicas,
        revision_history_limit: :revisionHistoryLimit,
        selector: :selector,
        service_name: :serviceName,
        template: :template,
        update_strategy: :updateStrategy,
        volume_claim_templates: :volumeClaimTemplates
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        min_ready_seconds: :Integer,
        persistent_volume_claim_retention_policy: :IoK8sApiAppsV1StatefulSetPersistentVolumeClaimRetentionPolicy,
        pod_management_policy: :String,
        replicas: :Integer,
        revision_history_limit: :Integer,
        selector: :IoK8sApimachineryPkgApisMetaV1LabelSelector,
        service_name: :String,
        template: :IoK8sApiCoreV1PodTemplateSpec,
        update_strategy: :IoK8sApiAppsV1StatefulSetUpdateStrategy,
        volume_claim_templates: :'Array<IoK8sApiCoreV1PersistentVolumeClaim>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Zilla::IoK8sApiAppsV1StatefulSetSpec` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Zilla::IoK8sApiAppsV1StatefulSetSpec`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.min_ready_seconds = attributes[:min_ready_seconds] if attributes.key?(:min_ready_seconds)

      if attributes.key?(:persistent_volume_claim_retention_policy)
        self.persistent_volume_claim_retention_policy = attributes[:persistent_volume_claim_retention_policy]
      end

      self.pod_management_policy = attributes[:pod_management_policy] if attributes.key?(:pod_management_policy)

      self.replicas = attributes[:replicas] if attributes.key?(:replicas)

      self.revision_history_limit = attributes[:revision_history_limit] if attributes.key?(:revision_history_limit)

      self.selector = attributes[:selector] if attributes.key?(:selector)

      self.service_name = attributes[:service_name] if attributes.key?(:service_name)

      self.template = attributes[:template] if attributes.key?(:template)

      self.update_strategy = attributes[:update_strategy] if attributes.key?(:update_strategy)

      return unless attributes.key?(:volume_claim_templates)
      return unless (value = attributes[:volume_claim_templates]).is_a?(Array)

      self.volume_claim_templates = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "selector", selector cannot be nil.') if @selector.nil?

      invalid_properties.push('invalid value for "service_name", service_name cannot be nil.') if @service_name.nil?

      invalid_properties.push('invalid value for "template", template cannot be nil.') if @template.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @selector.nil?
      return false if @service_name.nil?
      return false if @template.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        min_ready_seconds == other.min_ready_seconds &&
        persistent_volume_claim_retention_policy == other.persistent_volume_claim_retention_policy &&
        pod_management_policy == other.pod_management_policy &&
        replicas == other.replicas &&
        revision_history_limit == other.revision_history_limit &&
        selector == other.selector &&
        service_name == other.service_name &&
        template == other.template &&
        update_strategy == other.update_strategy &&
        volume_claim_templates == other.volume_claim_templates
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [min_ready_seconds, persistent_volume_claim_retention_policy, pod_management_policy, replicas,
       revision_history_limit, selector, service_name, template, update_strategy, volume_claim_templates].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Zilla.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
