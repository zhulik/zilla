# frozen_string_literal: true

# #Kubernetes
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: unversioned
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0-SNAPSHOT
#

require 'date'
require 'time'

module Zilla
  # NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
  class IoK8sApiCoreV1NodeSystemInfo
    # The Architecture reported by the node
    attr_accessor :architecture

    # Boot ID reported by the node.
    attr_accessor :boot_id

    # ContainerRuntime Version reported by the node through runtime remote API (e.g. containerd://1.4.2).
    attr_accessor :container_runtime_version

    # Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
    attr_accessor :kernel_version

    # KubeProxy Version reported by the node.
    attr_accessor :kube_proxy_version

    # Kubelet Version reported by the node.
    attr_accessor :kubelet_version

    # MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
    attr_accessor :machine_id

    # The Operating System reported by the node
    attr_accessor :operating_system

    # OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
    attr_accessor :os_image

    # SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
    attr_accessor :system_uuid

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        architecture: :architecture,
        boot_id: :bootID,
        container_runtime_version: :containerRuntimeVersion,
        kernel_version: :kernelVersion,
        kube_proxy_version: :kubeProxyVersion,
        kubelet_version: :kubeletVersion,
        machine_id: :machineID,
        operating_system: :operatingSystem,
        os_image: :osImage,
        system_uuid: :systemUUID
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        architecture: :String,
        boot_id: :String,
        container_runtime_version: :String,
        kernel_version: :String,
        kube_proxy_version: :String,
        kubelet_version: :String,
        machine_id: :String,
        operating_system: :String,
        os_image: :String,
        system_uuid: :String
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Zilla::IoK8sApiCoreV1NodeSystemInfo` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Zilla::IoK8sApiCoreV1NodeSystemInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      self.architecture = attributes[:architecture] if attributes.key?(:architecture)

      self.boot_id = attributes[:boot_id] if attributes.key?(:boot_id)

      if attributes.key?(:container_runtime_version)
        self.container_runtime_version = attributes[:container_runtime_version]
      end

      self.kernel_version = attributes[:kernel_version] if attributes.key?(:kernel_version)

      self.kube_proxy_version = attributes[:kube_proxy_version] if attributes.key?(:kube_proxy_version)

      self.kubelet_version = attributes[:kubelet_version] if attributes.key?(:kubelet_version)

      self.machine_id = attributes[:machine_id] if attributes.key?(:machine_id)

      self.operating_system = attributes[:operating_system] if attributes.key?(:operating_system)

      self.os_image = attributes[:os_image] if attributes.key?(:os_image)

      return unless attributes.key?(:system_uuid)

      self.system_uuid = attributes[:system_uuid]
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = []
      invalid_properties.push('invalid value for "architecture", architecture cannot be nil.') if @architecture.nil?

      invalid_properties.push('invalid value for "boot_id", boot_id cannot be nil.') if @boot_id.nil?

      if @container_runtime_version.nil?
        invalid_properties.push('invalid value for "container_runtime_version", container_runtime_version cannot be nil.')
      end

      if @kernel_version.nil?
        invalid_properties.push('invalid value for "kernel_version", kernel_version cannot be nil.')
      end

      if @kube_proxy_version.nil?
        invalid_properties.push('invalid value for "kube_proxy_version", kube_proxy_version cannot be nil.')
      end

      if @kubelet_version.nil?
        invalid_properties.push('invalid value for "kubelet_version", kubelet_version cannot be nil.')
      end

      invalid_properties.push('invalid value for "machine_id", machine_id cannot be nil.') if @machine_id.nil?

      if @operating_system.nil?
        invalid_properties.push('invalid value for "operating_system", operating_system cannot be nil.')
      end

      invalid_properties.push('invalid value for "os_image", os_image cannot be nil.') if @os_image.nil?

      invalid_properties.push('invalid value for "system_uuid", system_uuid cannot be nil.') if @system_uuid.nil?

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @architecture.nil?
      return false if @boot_id.nil?
      return false if @container_runtime_version.nil?
      return false if @kernel_version.nil?
      return false if @kube_proxy_version.nil?
      return false if @kubelet_version.nil?
      return false if @machine_id.nil?
      return false if @operating_system.nil?
      return false if @os_image.nil?
      return false if @system_uuid.nil?

      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        architecture == other.architecture &&
        boot_id == other.boot_id &&
        container_runtime_version == other.container_runtime_version &&
        kernel_version == other.kernel_version &&
        kube_proxy_version == other.kube_proxy_version &&
        kubelet_version == other.kubelet_version &&
        machine_id == other.machine_id &&
        operating_system == other.operating_system &&
        os_image == other.os_image &&
        system_uuid == other.system_uuid
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [architecture, boot_id, container_runtime_version, kernel_version, kube_proxy_version, kubelet_version,
       machine_id, operating_system, os_image, system_uuid].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Zilla.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
