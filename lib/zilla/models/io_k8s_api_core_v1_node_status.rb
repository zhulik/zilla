# frozen_string_literal: true

# #Kubernetes
#
# No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
#
# The version of the OpenAPI document: unversioned
#
# Generated by: https://openapi-generator.tech
# OpenAPI Generator version: 6.5.0-SNAPSHOT
#

require 'date'
require 'time'

module Zilla
  # NodeStatus is information about the current status of a node.
  class IoK8sApiCoreV1NodeStatus
    # List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
    attr_accessor :addresses

    # Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
    attr_accessor :allocatable

    # Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    attr_accessor :capacity

    # Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
    attr_accessor :conditions

    attr_accessor :config, :daemon_endpoints, :node_info

    # List of container images on this node
    attr_accessor :images

    # NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
    attr_accessor :phase

    # List of volumes that are attached to the node.
    attr_accessor :volumes_attached

    # List of attachable volumes in use (mounted) by the node.
    attr_accessor :volumes_in_use

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        addresses: :addresses,
        allocatable: :allocatable,
        capacity: :capacity,
        conditions: :conditions,
        config: :config,
        daemon_endpoints: :daemonEndpoints,
        images: :images,
        node_info: :nodeInfo,
        phase: :phase,
        volumes_attached: :volumesAttached,
        volumes_in_use: :volumesInUse
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        addresses: :'Array<IoK8sApiCoreV1NodeAddress>',
        allocatable: :'Hash<String, String>',
        capacity: :'Hash<String, String>',
        conditions: :'Array<IoK8sApiCoreV1NodeCondition>',
        config: :IoK8sApiCoreV1NodeConfigStatus,
        daemon_endpoints: :IoK8sApiCoreV1NodeDaemonEndpoints,
        images: :'Array<IoK8sApiCoreV1ContainerImage>',
        node_info: :IoK8sApiCoreV1NodeSystemInfo,
        phase: :String,
        volumes_attached: :'Array<IoK8sApiCoreV1AttachedVolume>',
        volumes_in_use: :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      unless attributes.is_a?(Hash)
        raise ArgumentError,
              'The input argument (attributes) must be a hash in `Zilla::IoK8sApiCoreV1NodeStatus` initialize method'
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) do |(k, v), h|
        unless self.class.attribute_map.key?(k.to_sym)
          raise ArgumentError,
                "`#{k}` is not a valid attribute in `Zilla::IoK8sApiCoreV1NodeStatus`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end

        h[k.to_sym] = v
      end

      if attributes.key?(:addresses) && (value = attributes[:addresses]).is_a?(Array)
        self.addresses = value
      end

      if attributes.key?(:allocatable) && (value = attributes[:allocatable]).is_a?(Hash)
        self.allocatable = value
      end

      if attributes.key?(:capacity) && (value = attributes[:capacity]).is_a?(Hash)
        self.capacity = value
      end

      if attributes.key?(:conditions) && (value = attributes[:conditions]).is_a?(Array)
        self.conditions = value
      end

      self.config = attributes[:config] if attributes.key?(:config)

      self.daemon_endpoints = attributes[:daemon_endpoints] if attributes.key?(:daemon_endpoints)

      if attributes.key?(:images) && (value = attributes[:images]).is_a?(Array)
        self.images = value
      end

      self.node_info = attributes[:node_info] if attributes.key?(:node_info)

      self.phase = attributes[:phase] if attributes.key?(:phase)

      if attributes.key?(:volumes_attached) && (value = attributes[:volumes_attached]).is_a?(Array)
        self.volumes_attached = value
      end

      return unless attributes.key?(:volumes_in_use)
      return unless (value = attributes[:volumes_in_use]).is_a?(Array)

      self.volumes_in_use = value
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      []
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if equal?(other)

      self.class == other.class &&
        addresses == other.addresses &&
        allocatable == other.allocatable &&
        capacity == other.capacity &&
        conditions == other.conditions &&
        config == other.config &&
        daemon_endpoints == other.daemon_endpoints &&
        images == other.images &&
        node_info == other.node_info &&
        phase == other.phase &&
        volumes_attached == other.volumes_attached &&
        volumes_in_use == other.volumes_in_use
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [addresses, allocatable, capacity, conditions, config, daemon_endpoints, images, node_info, phase,
       volumes_attached, volumes_in_use].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)

      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            send("#{key}=", attributes[self.class.attribute_map[key]].map do |v|
                              _deserialize(::Regexp.last_match(1), v)
                            end)
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Zilla.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
